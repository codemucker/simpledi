/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.codemucker.ksimpledi

import kotlin.test.Test
import kotlin.test.assertNotSame
import kotlin.test.assertSame
import kotlin.test.assertTrue

class KSimpleScopeTest {
    @Test fun singletonTest() {
        val scope = KSimpleDiScope()

        val bar = scope.singleton(false) {
            Bar()
        }
        val foo = scope.singleton{
            Foo( bar = bar.get() )
        }

        val f1 = foo.get()
        val f2 = foo.get()
        val f3 = scope.getInstance<Foo>()


        assertSame(f1, f2, "expect same instance for singleton")
        assertSame(f1, f3, "expect same instance for singleton")
    }

    @Test fun factoryTest() {
        val scope = KSimpleDiScope()

        val bar = scope.singleton{
            Bar()
        }
        val foo = scope.factory {
            Foo( bar = bar.get() )
        }

        val f1 = foo.get()
        val f2 = foo.get()
        val f3 = scope.getInstance<Foo>()


        assertNotSame(f1, f2, "expect different instances for factory")
        assertNotSame(f1, f3, "expect different instances for factory")
    }

    @Test fun factoryParamsTest() {
        val scope = KSimpleDiScope()

        val bar = scope.factoryWithParams { p1:String->
            Bar( p1 )
        }

        val b1 = bar.get("one")
        val b2 = bar.get("two")
        val b3 = scope.getInstance<Bar>( {params("three")})
        val b4 = scope.getInstanceWith<Bar>( "four")

        assertTrue(  b1.text == "one" )
        assertTrue(  b2.text == "two" )
        assertTrue(  b3.text == "three" )
        assertTrue(  b4.text == "four" )

    }

//    @Test fun customFactoryTest() {
//        val scope = KSimpleDiScope()
//
//        val bar = scope.factoryCustom() { p1:String->
//            Bar( p1 )
//        }
//
//        val b1 = bar.get("one")
//        val b2 = bar.get("two")
//        val b3 = scope.getInstance<Bar>( {params("three")})
//        val b4 = scope.getInstanceWith<Bar>( "four")
//
//        assertTrue(  b1.text == "one" )
//        assertTrue(  b2.text == "two" )
//        assertTrue(  b3.text == "three" )
//        assertTrue(  b4.text == "four" )
//
//    }
}

class Bar(val text:String?= null)
data class Foo(val bar:Bar)

